import React, { useEffect, useState } from "react";

// SafeView Shield ‚Äî React Demo (VN, v2)
// M·ª•c ti√™u: t·∫≠p trung v√†o TH·∫®M M·ª∏ & B·ªê C·ª§C, kh√¥ng GPS, kh√¥ng gi·ªõi h·∫°n th·ªùi gian (ch·ªâ nudges)
// G·ªìm: Onboarding (cards + social proof + test‚Äërun + paywall), Parent App (dashboard card-based), Kid Mode + Protected Player

// ====== TI·ªÜN √çCH GIAO DI·ªÜN ======
const Badge = ({ children }) => (
  <span className="px-2 py-1 rounded-full text-xs bg-white/70 backdrop-blur border shadow-sm">{children}</span>
);

const Card = ({ title, right, children, tone = "white" }) => (
  <div
    className={
      tone === "brand"
        ? "rounded-2xl p-4 mb-4 bg-gradient-to-br from-[#7C4DFF] to-[#9C6BFF] text-white shadow-lg"
        : tone === "muted"
          ? "rounded-2xl p-4 mb-4 bg-gray-50 border shadow-sm"
          : "rounded-2xl p-4 mb-4 bg-white border shadow-sm"
    }
  >
    <div className="flex items-center justify-between mb-3">
      <h3 className={`font-semibold ${tone === "brand" ? "text-white" : "text-gray-900"}`}>{title}</h3>
      {right}
    </div>
    {children}
  </div>
);

const Toggle = ({ checked, onChange }) => (
  <button
    onClick={() => onChange(!checked)}
    className={`w-12 h-7 rounded-full border flex items-center transition-all ${checked ? "bg-[#7C4DFF] justify-end" : "bg-gray-200 justify-start"
      }`}
  >
    <span className="w-6 h-6 rounded-full bg-white shadow m-0.5" />
  </button>
);

const Chip = ({ label, onRemove }) => (
  <span className="inline-flex items-center gap-1 px-3 py-1 rounded-full bg-gray-100 text-sm mr-2 mb-2">
    {label}
    {onRemove && (
      <button onClick={onRemove} className="text-gray-500 hover:text-gray-700">√ó</button>
    )}
  </span>
);

const IconBox = ({ emoji, title, desc }) => (
  <div className="rounded-2xl p-4 bg-white border shadow-sm">
    <div className="text-3xl mb-2">{emoji}</div>
    <div className="font-semibold mb-1">{title}</div>
    <div className="text-sm text-gray-600">{desc}</div>
  </div>
);

// ====== ·ª®NG D·ª§NG G·ªêC ======
export default function App() {
  const [firstRun, setFirstRun] = useState(true); // Onboarding ch·ªâ l·∫ßn ƒë·∫ßu
  const [mode, setMode] = useState("parent"); // 'parent' | 'kid'

  // Tr·∫°ng th√°i m√¥ ph·ªèng
  const [shieldOn, setShieldOn] = useState(true);
  const [child, setChild] = useState({ name: "B√© Na", age: 8, avatar: "üßí" });
  const [pin, setPin] = useState("");
  const [whitelist, setWhitelist] = useState(["VTV7 Kids", "Monkey Junior", "K√™nh Sinh H·ªçc Vui"]);
  const [sensitivity, setSensitivity] = useState({ horror: 0.8, gore: 1.0, sexual: 1.0, dangerous: 0.7 });
  const [incidents, setIncidents] = useState([
    { id: "a1", at: "09:32", reason: "Jumpscare", platform: "YouTube", skipped: 12 },
    { id: "a2", at: "18:05", reason: "√Çm thanh la h√©t", platform: "TikTok", skipped: 8 },
  ]);

  const handleFinishOnboarding = () => {
    setFirstRun(false);
    setMode("parent");
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-[#F7F5FF] to-white">
      <Header mode={mode} setMode={setMode} />

      <main className="max-w-6xl mx-auto p-4">
        {firstRun ? (
          <Onboarding
            pin={pin}
            setPin={setPin}
            child={child}
            setChild={setChild}
            whitelist={whitelist}
            setWhitelist={setWhitelist}
            sensitivity={sensitivity}
            setSensitivity={setSensitivity}
            onDone={handleFinishOnboarding}
          />
        ) : mode === "parent" ? (
          <ParentApp
            shieldOn={shieldOn}
            setShieldOn={setShieldOn}
            child={child}
            whitelist={whitelist}
            setWhitelist={setWhitelist}
            incidents={incidents}
            sensitivity={sensitivity}
            setSensitivity={setSensitivity}
          />
        ) : (
          <KidApp
            child={child}
            onIncident={(i) => setIncidents((arr) => [{ id: Math.random().toString(36).slice(2), ...i }, ...arr])}
          />
        )}
      </main>
    </div>
  );
}

function Header({ mode, setMode }) {
  return (
    <header className="sticky top-0 z-10 bg-white/70 backdrop-blur border-b">
      <div className="max-w-6xl mx-auto px-4 py-3 flex items-center justify-between">
        <div className="flex items-center gap-3">
          <span className="text-2xl">üõ°Ô∏è</span>
          <div>
            <div className="font-semibold">SafeView Shield</div>
            <div className="text-xs text-gray-500">T∆∞·ªùng l·ª≠a n·ªôi dung cho tr·∫ª em</div>
          </div>
        </div>
        <div className="flex items-center gap-2">
          <button onClick={() => setMode("parent")} className={`px-3 py-1 rounded-full text-sm border ${mode === "parent" ? "bg-black text-white" : "bg-white"}`}>Ph·ª• huynh</button>
          <button onClick={() => setMode("kid")} className={`px-3 py-1 rounded-full text-sm border ${mode === "kid" ? "bg-black text-white" : "bg-white"}`}>Tr·∫ª em</button>
        </div>
      </div>
    </header>
  );
}

// ====== ONBOARDING ======
function Onboarding({ pin, setPin, child, setChild, whitelist, setWhitelist, sensitivity, setSensitivity, onDone }) {
  const [step, setStep] = useState(0);
  const steps = ["Gi·ªõi thi·ªáu", "H·ªì s∆° & PIN", "ƒê·ªô nh·∫°y", "Quy·ªÅn c·∫ßn thi·∫øt", "K·∫øt n·ªëi thi·∫øt b·ªã", "Test‚Äërun", "X√°c th·ª±c x√£ h·ªôi", "D√πng th·ª≠"];
  const next = () => setStep((s) => Math.min(steps.length - 1, s + 1));
  const back = () => setStep((s) => Math.max(0, s - 1));

  return (
    <div className="grid lg:grid-cols-[320px_1fr] gap-6">
      {/* Sidebar ti·∫øn ƒë·ªô */}
      <div className="bg-white rounded-2xl border shadow-sm p-4 h-max">
        <div className="font-semibold mb-2">Thi·∫øt l·∫≠p ban ƒë·∫ßu</div>
        <ol className="text-sm">
          {steps.map((s, i) => (
            <li key={s} className={`py-1 ${i === step ? "font-semibold" : "text-gray-500"}`}>{i + 1}. {s}</li>
          ))}
        </ol>
      </div>

      {/* N·ªôi dung b∆∞·ªõc */}
      <div>
        {step === 0 && (
          <Card title="B·∫£o v·ªá con kh·ªèi video ƒë√°ng s·ª£, ngay khi ƒëang ph√°t" tone="brand" right={<Badge>2 ph√∫t l√† xong</Badge>}>
            <div className="grid sm:grid-cols-2 gap-3">
              <IconBox emoji="üß†" title="L·ªçc n·ªôi dung" desc="AI b·ªè qua c·∫£nh ƒë√°ng s·ª£, b·∫°o l·ª±c, 18+ theo th·ªùi gian th·ª±c." />
              <IconBox emoji="üéöÔ∏è" title="ƒê·ªô nh·∫°y & ƒë·ªô tu·ªïi" desc="T√πy ch·ªânh theo l·ª©a tu·ªïi & gi√° tr·ªã gia ƒë√¨nh." />
              <IconBox emoji="‚ñ∂Ô∏è" title="Tr√¨nh ph√°t b·∫£o v·ªá" desc="Xem YouTube/TikTok qua l·ªõp l√° ch·∫Øn an to√†n." />
              <IconBox emoji="üåô" title="Nh·∫Øc ngh·ªâ & ch·∫ø ƒë·ªô ƒë√™m" desc="Nh·∫π nh√†ng nh·∫Øc con ngh·ªâ, kh√¥ng kh√≥a c·ª©ng." />
            </div>
            <div className="mt-4 flex gap-2">
              <button className="px-3 py-2 rounded-xl bg-white text-black" onClick={next}>B·∫Øt ƒë·∫ßu ‚Üí</button>
            </div>
          </Card>
        )}

        {step === 1 && (
          <Card title="H·ªì s∆° tr·∫ª & m√£ PIN">
            <div className="grid sm:grid-cols-3 gap-3">
              <label className="block">
                <div className="text-sm text-gray-600 mb-1">T√™n tr·∫ª</div>
                <input className="border rounded-xl px-3 py-2 w-full" value={child.name} onChange={(e) => setChild({ ...child, name: e.target.value })} />
              </label>
              <label className="block">
                <div className="text-sm text-gray-600 mb-1">Tu·ªïi</div>
                <input type="number" className="border rounded-xl px-3 py-2 w-full" value={child.age} min={4} max={16} onChange={(e) => setChild({ ...child, age: parseInt(e.target.value || "0", 10) })} />
              </label>
              <label className="block">
                <div className="text-sm text-gray-600 mb-1">PIN ph·ª• huynh</div>
                <input className="border rounded-xl px-3 py-2 w-full" placeholder="4‚Äì6 s·ªë" value={pin} onChange={(e) => setPin(e.target.value.replace(/[^0-9]/g, "").slice(0, 6))} />
              </label>
            </div>
            <div className="mt-3"><button className="px-3 py-2 rounded-xl border" onClick={next} disabled={pin.length < 4}>Ti·∫øp t·ª•c</button></div>
          </Card>
        )}

        {step === 2 && (
          <Card title="Ch·ªçn ƒë·ªô nh·∫°y n·ªôi dung ph√π h·ª£p">
            <Slider label="Kinh d·ªã/Jumpscare" value={sensitivity.horror} onChange={(v) => setSensitivity({ ...sensitivity, horror: v })} />
            <Slider label="M√°u me" value={sensitivity.gore} onChange={(v) => setSensitivity({ ...sensitivity, gore: v })} />
            <Slider label="Ch·ªß ƒë·ªÅ nh·∫°y c·∫£m" value={sensitivity.sexual} onChange={(v) => setSensitivity({ ...sensitivity, sexual: v })} />
            <Slider label="H√†nh vi nguy hi·ªÉm" value={sensitivity.dangerous} onChange={(v) => setSensitivity({ ...sensitivity, dangerous: v })} />
            <div className="mt-3"><button className="px-3 py-2 rounded-xl border" onClick={next}>Ti·∫øp theo</button></div>
          </Card>
        )}

        {step === 3 && (
          <Card title="C·∫•p quy·ªÅn c·∫ßn thi·∫øt">
            <div className="grid sm:grid-cols-3 gap-3">
              <PermitItem icon="ü™ü" title="L·ªõp ph·ªß/Accessibility" desc="ƒê·ªÉ SafeView quan s√°t khung h√¨nh v√† b·ªè qua c·∫£nh x·∫•u." />
              <PermitItem icon="üîî" title="Th√¥ng b√°o" desc="G·ª≠i nh·∫Øc ngh·ªâ & c·∫£nh b√°o s·ª± c·ªë." />
              <PermitItem icon="üîã" title="B·ªè t·ªëi ∆∞u pin (Android)" desc="ƒê·∫£m b·∫£o l√° ch·∫Øn ho·∫°t ƒë·ªông ·ªïn ƒë·ªãnh." />
            </div>
            <div className="mt-3"><button className="px-3 py-2 rounded-xl border" onClick={next}>ƒê√£ hi·ªÉu</button></div>
          </Card>
        )}

        {step === 4 && (
          <Card title="K·∫øt n·ªëi thi·∫øt b·ªã c·ªßa tr·∫ª">
            <div className="grid md:grid-cols-2 gap-4 items-center">
              <div>
                <p className="text-gray-600 mb-2">Qu√©t m√£ QR tr√™n thi·∫øt b·ªã c·ªßa tr·∫ª ƒë·ªÉ ƒëƒÉng nh·∫≠p nhanh Kid Mode.</p>
                <div className="flex gap-2">
                  <button className="px-3 py-2 rounded-xl border">T·∫°o m√£ QR</button>
                  <button className="px-3 py-2 rounded-xl border">H∆∞·ªõng d·∫´n c√†i ƒë·∫∑t</button>
                </div>
              </div>
              <div className="aspect-square bg-gray-100 rounded-2xl grid place-items-center text-4xl">‚ñ£</div>
            </div>
            <div className="mt-3"><button className="px-3 py-2 rounded-xl border" onClick={next}>Ti·∫øp theo</button></div>
          </Card>
        )}

        {step === 5 && (
          <Card title="Th·ª≠ nghi·ªám nhanh (1 c·∫£nh)" tone="muted">
            <p className="text-gray-700 mb-2">B·∫•m ch·∫°y video m·∫´u; khi g·∫∑p c·∫£nh ƒë√°ng s·ª£, SafeView s·∫Ω t·ª± ƒë·ªông b·ªè qua 12 gi√¢y v√† hi·ªÉn th·ªã l√Ω do.</p>
            <DemoShield onContinue={() => setStep(6)} />
          </Card>
        )}

        {step === 6 && (
          <Card title="H∆°n 2 tri·ªáu ph·ª• huynh tin d√πng (v√≠ d·ª•)" tone="white">
            <div className="grid sm:grid-cols-2 gap-3">
              <IconBox emoji="‚úÖ" title="B·ªè qua c·∫£nh ƒë√°ng s·ª£" desc="Tr·∫ª kh√¥ng ph·∫£i nh√¨n th·∫•y c·∫£nh x·∫•u." />
              <IconBox emoji="üîí" title="Kh√¥ng l∆∞u video th√¥" desc="Ch·ªâ ghi l√Ω do & th·ªùi l∆∞·ª£ng ƒë√£ b·ªè qua." />
            </div>
            <div className="mt-3"><button className="px-3 py-2 rounded-xl border" onClick={next}>Ti·∫øp t·ª•c</button></div>
          </Card>
        )}

        {step === 7 && (
          <Card title="D√πng th·ª≠ mi·ªÖn ph√≠ 3 ng√†y" tone="white">
            <div className="rounded-2xl border p-4 mb-3 bg-white">
              <div className="text-lg font-semibold mb-1">‚ÄúCon m√¨nh ng·ªß ƒë√∫ng gi·ªù h∆°n v√† kh√¥ng c√≤n s·ª£ video b·∫•t ng·ªù.‚Äù</div>
              <div className="text-sm text-gray-600">‚Äî M·ªôt ph·ª• huynh t·∫°i H√† N·ªôi</div>
            </div>
            <div className="grid sm:grid-cols-2 gap-3">
              <Plan title="3 ng√†y ƒë·∫ßu mi·ªÖn ph√≠" price="83.000ƒë/th√°ng" note="(999.000ƒë/nƒÉm)" best />
              <Plan title="129.000ƒë/th√°ng" price="129.000ƒë/th√°ng" />
            </div>
            <div className="mt-4 flex gap-2">
              <button className="px-4 py-3 rounded-xl bg-[#7C4DFF] text-white shadow" onClick={onDone}>B·∫Øt ƒë·∫ßu d√πng th·ª≠</button>
              <button className="px-4 py-3 rounded-xl border">ƒê·ªÉ sau</button>
            </div>
            <div className="text-xs text-gray-500 mt-2">ƒê∆∞·ª£c App Store/Play b·∫£o v·ªá ‚Ä¢ H·ªßy b·∫•t c·ª© l√∫c n√†o</div>
          </Card>
        )}

        <div className="flex justify-between">
          <button onClick={back} className="px-3 py-2 rounded-xl border disabled:opacity-40" disabled={step === 0}>‚Üê Quay l·∫°i</button>
          <div className="text-sm text-gray-500">B∆∞·ªõc {step + 1} / {steps.length}</div>
        </div>
      </div>
    </div>
  );
}

function PermitItem({ icon, title, desc }) {
  return (
    <div className="rounded-2xl p-4 bg-white border shadow-sm">
      <div className="text-3xl">{icon}</div>
      <div className="font-semibold mt-1">{title}</div>
      <div className="text-sm text-gray-600">{desc}</div>
    </div>
  );
}

function Slider({ label, value, onChange }) {
  return (
    <div className="mb-3">
      <div className="flex items-center justify-between">
        <span>{label}</span>
        <span className="text-sm text-gray-500">{Math.round(value * 100)}%</span>
      </div>
      <input type="range" min={0} max={1} step={0.05} value={value} onChange={(e) => onChange(parseFloat(e.target.value))} className="w-full" />
    </div>
  );
}

function DemoShield({ onContinue }) {
  const [stage, setStage] = useState("idle");
  useEffect(() => {
    if (stage === "play") {
      const id = setTimeout(() => setStage("blocked"), 2200);
      return () => clearTimeout(id);
    }
  }, [stage]);
  return (
    <div>
      {stage === "idle" && <button className="px-3 py-2 rounded-xl border" onClick={() => setStage("play")}>Ch·∫°y video m·∫´u ‚ñ∂</button>}
      {stage === "play" && <div className="h-32 rounded-xl bg-black/80 text-white grid place-items-center">ƒêang ph√°t‚Ä¶</div>}
      {stage === "blocked" && (
        <div className="p-4 rounded-xl bg-yellow-50 border border-yellow-200">
          <div className="font-medium">üîí ƒê√£ b·ªè qua 12 gi√¢y v√¨ c·∫£nh ƒë√°ng s·ª£</div>
          <div className="text-sm text-gray-700">L√Ω do: √Çm thanh la h√©t + C·∫£nh t·ªëi + Bi·∫øn d·∫°ng khu√¥n m·∫∑t</div>
          <div className="mt-2"><button className="px-3 py-2 rounded-xl border" onClick={onContinue}>Ti·∫øp t·ª•c</button></div>
        </div>
      )}
    </div>
  );
}

function Plan({ title, price, note, best }) {
  return (
    <div className={`rounded-2xl p-4 border ${best ? "border-[#7C4DFF] bg-[#F6F1FF]" : "bg-white"}`}>
      {best && <span className="text-xs px-2 py-1 bg-orange-100 text-orange-700 rounded-full">L·ª±a ch·ªçn t·ªët nh·∫•t</span>}
      <div className="font-semibold mt-1">{title}</div>
      <div className="text-sm text-gray-600">{price} {note && <span className="text-gray-400">{note}</span>}</div>
    </div>
  );
}

// ====== PARENT APP ======
function ParentApp({ shieldOn, setShieldOn, child, whitelist, setWhitelist, incidents, sensitivity, setSensitivity }) {
  const [tab, setTab] = useState("dashboard"); // dashboard | incidents | rules | devices | more
  return (
    <div className="grid lg:grid-cols-[260px_1fr] gap-6">
      {/* Side nav */}
      <div className="bg-white rounded-2xl border shadow-sm p-4 h-max">
        <div className="font-semibold mb-2">Ph·ª• huynh</div>
        {[
          ["dashboard", "B·∫£ng ƒëi·ªÅu khi·ªÉn"],
          ["incidents", "S·ª± c·ªë"],
          ["rules", "Quy t·∫Øc"],
          ["devices", "Thi·∫øt b·ªã"],
          ["more", "Kh√°c"],
        ].map(([k, label]) => (
          <button key={k} onClick={() => setTab(k)} className={`w-full text-left px-3 py-2 rounded-xl border mb-2 ${tab === k ? "bg-black text-white" : "bg-white"}`}>{label}</button>
        ))}
      </div>

      {/* Content */}
      <div>
        {tab === "dashboard" && (
          <div>
            <Card title="L√° ch·∫Øn n·ªôi dung" tone="brand" right={<Badge>Kid: {child.name} ‚Ä¢ {child.age}t</Badge>}>
              <div className="flex items-center gap-4">
                <Toggle checked={shieldOn} onChange={setShieldOn} />
                <div>
                  <div className="font-medium">Tr·∫°ng th√°i: {shieldOn ? "B·∫¨T" : "T·∫ÆT"}</div>
                  <div className="text-sm text-white/80">T·ª± ƒë·ªông b·ªè qua c·∫£nh ƒë√°ng s·ª£, b·∫°o l·ª±c, 18+.</div>
                </div>
              </div>
            </Card>

            <div className="grid md:grid-cols-2 gap-4">
              <Card title="S·ª± c·ªë h√¥m nay" right={<button className="text-sm underline">Xem t·∫•t c·∫£ ‚Üí</button>}>
                <IncidentList items={incidents.slice(0, 4)} compact />
              </Card>
              <Card title="K√™nh tin c·∫≠y (Whitelist)">
                <div className="flex flex-wrap">
                  {whitelist.map((w, i) => (
                    <Chip key={i} label={w} onRemove={() => setWhitelist(whitelist.filter((_, idx) => idx !== i))} />
                  ))}
                </div>
                <AddWhitelist onAdd={(name) => setWhitelist([...whitelist, name])} />
              </Card>
            </div>

            <Card title="Nh·∫Øc ngh·ªâ & Ch·∫ø ƒë·ªô ƒê√™m" tone="muted">
              <div className="grid sm:grid-cols-3 gap-3 text-sm">
                <label className="flex items-center gap-2"><input type="checkbox" defaultChecked /> Nh·∫Øc ngh·ªâ m·ªói 20‚Äì30 ph√∫t</label>
                <label className="flex items-center gap-2"><input type="checkbox" /> L√†m d·ªãu m√†n h√¨nh sau 21:00</label>
                <label className="flex items-center gap-2"><input type="checkbox" /> G·ª£i √Ω n·ªôi dung nh·∫π v√†o bu·ªïi t·ªëi</label>
              </div>
            </Card>
          </div>
        )}

        {tab === "incidents" && (
          <Card title="Nh·∫≠t k√Ω s·ª± c·ªë (l·ªçc n·ªôi dung)">
            <IncidentList items={incidents} />
          </Card>
        )}

        {tab === "rules" && (
          <div>
            <Card title="ƒê·ªô nh·∫°y n·ªôi dung">
              <Slider label="Kinh d·ªã/Jumpscare" value={sensitivity.horror} onChange={(v) => setSensitivity({ ...sensitivity, horror: v })} />
              <Slider label="M√°u me" value={sensitivity.gore} onChange={(v) => setSensitivity({ ...sensitivity, gore: v })} />
              <Slider label="Ch·ªß ƒë·ªÅ nh·∫°y c·∫£m" value={sensitivity.sexual} onChange={(v) => setSensitivity({ ...sensitivity, sexual: v })} />
              <Slider label="H√†nh vi nguy hi·ªÉm" value={sensitivity.dangerous} onChange={(v) => setSensitivity({ ...sensitivity, dangerous: v })} />
            </Card>
            <Card title="K√™nh tin c·∫≠y (Whitelist)">
              <div className="flex flex-wrap mb-2">
                {whitelist.map((w, i) => (
                  <Chip key={i} label={w} onRemove={() => setWhitelist(whitelist.filter((_, idx) => idx !== i))} />
                ))}
              </div>
              <AddWhitelist onAdd={(name) => setWhitelist([...whitelist, name])} />
            </Card>
          </div>
        )}

        {tab === "devices" && (
          <div className="grid md:grid-cols-2 gap-4">
            <DeviceCard name="Android c·ªßa Na" status="Tr·ª±c tuy·∫øn" shield={shieldOn ? "B·∫¨T" : "T·∫ÆT"} />
            <DeviceCard name="iPad Mini" status="Ngo·∫°i tuy·∫øn" shield="‚Äî" />
          </div>
        )}

        {tab === "more" && (
          <Card title="Kh√°c">
            <div className="grid sm:grid-cols-2 gap-3 text-sm">
              <label className="flex items-center gap-2"><input type="checkbox" /> Tham gia ch∆∞∆°ng tr√¨nh d√πng th·ª≠ t√≠nh nƒÉng m·ªõi</label>
              <label className="flex items-center gap-2"><input type="checkbox" defaultChecked /> ·∫®n ho√†n to√†n t√≠nh nƒÉng v·ªã tr√≠ (GPS)</label>
            </div>
            <div className="mt-3 text-xs text-gray-500">SafeView kh√¥ng l∆∞u video th√¥; ch·ªâ ghi l√Ω do ch·∫∑n v√† th·ªùi l∆∞·ª£ng ƒë√£ b·ªè qua.</div>
          </Card>
        )}
      </div>
    </div>
  );
}

function IncidentList({ items, compact }) {
  if (!items.length) return <div className="text-gray-500">Ch∆∞a c√≥ s·ª± c·ªë.</div>;
  return (
    <div className="space-y-2">
      {items.map((i) => (
        <div key={i.id} className={`flex items-center justify-between rounded-xl border p-2 ${compact ? "text-sm" : ""}`}>
          <div>
            <span className="text-gray-500 mr-2">[{i.at}]</span>
            <span className="font-medium">{i.reason}</span>
            <span className="text-gray-500"> ‚Ä¢ {i.platform} ‚Ä¢ skip {i.skipped}s</span>
          </div>
          <button className="px-2 py-1 rounded-lg border text-xs">Gi·∫£i th√≠ch</button>
        </div>
      ))}
    </div>
  );
}

function AddWhitelist({ onAdd }) {
  const [val, setVal] = useState("");
  return (
    <div className="flex gap-2">
      <input className="border rounded-xl px-3 py-2 flex-1" placeholder="Th√™m k√™nh/creator" value={val} onChange={(e) => setVal(e.target.value)} />
      <button className="px-3 py-2 rounded-xl border" onClick={() => { if (!val.trim()) return; onAdd(val.trim()); setVal(""); }}>Th√™m</button>
    </div>
  );
}

function DeviceCard({ name, status, shield }) {
  return (
    <Card title={name}>
      <div className="text-sm text-gray-700">Tr·∫°ng th√°i: {status} ‚Ä¢ L√° ch·∫Øn: {shield}</div>
      <div className="mt-2 flex gap-2">
        <button className="px-3 py-2 rounded-xl border">T·∫°m d·ª´ng</button>
        <button className="px-3 py-2 rounded-xl border">H·ªßy gh√©p</button>
      </div>
    </Card>
  );
}

// ====== KID APP ======
function KidApp({ child, onIncident }) {
  const [tab, setTab] = useState("home"); // home | explore | player | rewards
  return (
    <div className="grid lg:grid-cols-[320px_1fr] gap-6">
      {/* Sidebar Kid */}
      <div className="rounded-2xl p-4 h-max bg-gradient-to-br from-[#7C4DFF] to-[#9C6BFF] text-white shadow-lg">
        <div className="flex items-center gap-3 mb-2">
          <div className="text-3xl">{child.avatar}</div>
          <div>
            <div className="font-semibold">{child.name}</div>
            <div className="text-white/80 text-sm">{child.age} tu·ªïi</div>
          </div>
        </div>
        <div className="grid grid-cols-2 gap-2">
          {[
            ["home", "üè† Trang ch·ªß"],
            ["explore", "üîé Kh√°m ph√°"],
            ["player", "‚ñ∂ Tr√¨nh ph√°t"],
            ["rewards", "üèÜ Ph·∫ßn th∆∞·ªüng"],
          ].map(([k, label]) => (
            <button key={k} onClick={() => setTab(k)} className={`px-3 py-2 rounded-xl border border-white/30 ${tab === k ? "bg-white text-black" : "bg-white/10 text-white"}`}>{label}</button>
          ))}
        </div>
        <div className="mt-3 text-sm text-white/90">L√° ch·∫Øn: <b>‚óè B·∫¨T</b> ‚Ä¢ ‚è≥ Nh·∫Øc ngh·ªâ ƒë·ªãnh k·ª≥</div>
      </div>

      <div>
        {tab === "home" && <KidHome onOpenPlayer={() => setTab("player")} />}
        {tab === "explore" && <KidExplore onOpenPlayer={() => setTab("player")} />}
        {tab === "player" && <ProtectedPlayer onIncident={onIncident} />}
        {tab === "rewards" && <KidRewards />}
      </div>
    </div>
  );
}

function KidHome({ onOpenPlayer }) {
  return (
    <div>
      <Card title="T√¨m ki·∫øm an to√†n" right={<Badge>Gi·ªçng n√≥i üé§</Badge>}>
        <input className="border rounded-xl px-3 py-2 w-full" placeholder="Con mu·ªën xem g√¨?" />
      </Card>
      <Card title="Ch·ªß ƒë·ªÅ g·ª£i √Ω">
        <div className="flex flex-wrap gap-2">
          {["To√°n", "ƒê·ªông v·∫≠t", "Minecraft", "DIY", "Kh√¥ng gian"].map((x) => (
            <span key={x} className="px-3 py-1 rounded-full bg-gray-100 text-sm">{x}</span>
          ))}
        </div>
      </Card>
      <Card title="H√†ng ch·ªù an to√†n" right={<button className="text-sm underline">Xem t·∫•t c·∫£ ‚Üí</button>}>
        <div className="grid sm:grid-cols-3 gap-3">
          {[1, 2, 3].map((i) => (
            <div key={i} className="rounded-xl overflow-hidden border">
              <div className="aspect-video bg-gray-200 grid place-items-center">·∫¢nh thu nh·ªè</div>
              <div className="p-2 text-sm">Video {i} ‚Ä¢ An to√†n</div>
            </div>
          ))}
        </div>
        <div className="mt-3 flex justify-end"><button onClick={onOpenPlayer} className="px-3 py-2 rounded-xl border">Xem b·∫±ng Tr√¨nh ph√°t b·∫£o v·ªá ‚ñ∂</button></div>
      </Card>
      <Card title="Nh·∫Øc nh·ªü nh·∫π" tone="muted">
        <div className="text-sm text-gray-700">üåô Bu·ªïi t·ªëi h√£y ch·ªçn n·ªôi dung nh·∫π ‚Äì SafeView s·∫Ω nh·∫Øc con ngh·ªâ ƒë·ªÅu ƒë·∫∑n.</div>
      </Card>
    </div>
  );
}

function KidExplore({ onOpenPlayer }) {
  return (
    <Card title="Kh√°m ph√° an to√†n">
      <div className="grid md:grid-cols-4 gap-3">
        {["Khoa h·ªçc", "Th·ªÉ thao", "V·∫Ω", "L·ªãch s·ª≠"].map((x) => (
          <div key={x} className="rounded-2xl border p-4">
            <div className="font-medium mb-1">{x}</div>
            <div className="text-xs text-gray-500 mb-2">Danh s√°ch ph√°t ƒë√£ ki·ªÉm duy·ªát</div>
            <button className="px-3 py-2 rounded-xl border" onClick={onOpenPlayer}>Xem ‚ñ∂</button>
          </div>
        ))}
      </div>
    </Card>
  );
}

function KidRewards() {
  return (
    <div className="grid sm:grid-cols-3 gap-3">
      {["L√° ch·∫Øn ƒë·∫ßu ti√™n!", "B√¨nh tƒ©nh ch·ªçn l·∫°i", "Chu·ªói 3 ng√†y"].map((b, i) => (
        <div key={i} className="rounded-2xl border p-4 bg-gradient-to-br from-gray-50 to-white">
          <div className="text-3xl">üèÖ</div>
          <div className="font-medium mt-2">{b}</div>
          <div className="text-xs text-gray-500">Danh hi·ªáu ƒë·∫°t ƒë∆∞·ª£c</div>
        </div>
      ))}
    </div>
  );
}

// ====== PROTECTED PLAYER ======
function ProtectedPlayer({ onIncident }) {
  const [progress, setProgress] = useState(0);
  const [overlay, setOverlay] = useState(null); // {reason, skipped}
  const [playing, setPlaying] = useState(true);

  useEffect(() => {
    if (!playing || overlay) return;
    const id = setInterval(() => setProgress((p) => Math.min(120, p + 1)), 100);
    return () => clearInterval(id);
  }, [playing, overlay]);

  useEffect(() => {
    if (progress === 30 && !overlay) {
      setOverlay({ reason: "√Çm thanh la h√©t + C·∫£nh t·ªëi + Bi·∫øn d·∫°ng khu√¥n m·∫∑t", skipped: 12 });
      onIncident?.({ at: new Date().toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" }), reason: "Jumpscare", platform: "YouTube", skipped: 12 });
    }
  }, [progress]);

  const skip = (sec) => setProgress((p) => Math.min(120, p + sec));

  return (
    <div>
      <div className="rounded-2xl overflow-hidden border bg-black text-white relative">
        <div className="aspect-video grid place-items-center text-2xl">{playing ? "ƒêang ph√°t‚Ä¶" : "ƒê√£ t·∫°m d·ª´ng"}</div>
        {overlay && (
          <div className="absolute inset-0 bg-black/70 backdrop-blur-sm text-white p-4 flex items-center justify-center">
            <div className="bg-white text-black rounded-xl p-4 max-w-md w-full shadow">
              <div className="font-semibold mb-1">üîí ƒê√£ b·ªè qua {overlay.skipped}s v√¨ c·∫£nh kh√¥ng ph√π h·ª£p</div>
              <div className="text-sm text-gray-700">L√Ω do: {overlay.reason}</div>
              <div className="mt-3 flex flex-wrap gap-2">
                <button className="px-3 py-2 rounded-xl border" onClick={() => { setOverlay(null); setPlaying(true); skip(overlay.skipped); }}>Ti·∫øp t·ª•c xem</button>
                <button className="px-3 py-2 rounded-xl border" onClick={() => { setOverlay(null); skip(overlay.skipped + 10); }}>B·ªè qua ti·∫øp</button>
                <button className="px-3 py-2 rounded-xl border">Gi·∫£i th√≠ch</button>
              </div>
              <div className="text-xs text-right text-gray-500 mt-2">(PIN ph·ª• huynh ‚ñ¢‚ñ¢‚ñ¢‚ñ¢)</div>
            </div>
          </div>
        )}
      </div>
      <div className="mt-2 flex items-center gap-2">
        <div className="h-2 bg-gray-200 rounded w-full overflow-hidden">
          <div className="h-full bg-gray-800" style={{ width: `${(progress / 120) * 100}%` }} />
        </div>
        <div className="text-sm w-20 text-right">{progress}s</div>
      </div>
      <div className="mt-3 flex flex-wrap gap-2">
        <button className="px-3 py-2 rounded-xl border" onClick={() => setPlaying((p) => !p)}>{playing ? "T·∫°m d·ª´ng" : "Ph√°t"}</button>
        <button className="px-3 py-2 rounded-xl border" onClick={() => skip(10)}>B·ªè qua 10s</button>
        <button className="px-3 py-2 rounded-xl border" onClick={() => setOverlay({ reason: "Ki·ªÉm th·ª≠ th·ªß c√¥ng: khung h√¨nh m√°u me", skipped: 12 })}>K√≠ch ho·∫°t l√° ch·∫Øn</button>
      </div>
    </div>
  );
}
